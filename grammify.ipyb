{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in /opt/app-root/lib/python3.6/site-packages (3.5)\n",
      "Requirement already satisfied: regex in /opt/app-root/lib/python3.6/site-packages (from nltk) (2020.11.13)\n",
      "Requirement already satisfied: joblib in /opt/app-root/lib/python3.6/site-packages (from nltk) (0.14.1)\n",
      "Requirement already satisfied: click in /opt/app-root/lib/python3.6/site-packages (from nltk) (7.1.1)\n",
      "Requirement already satisfied: tqdm in /opt/app-root/lib/python3.6/site-packages (from nltk) (4.54.1)\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.3.1 is available.\n",
      "You should consider upgrading via the '/opt/app-root/bin/python3 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package tagsets to /opt/app-\n",
      "[nltk_data]     root/src/nltk_data...\n",
      "[nltk_data]   Unzipping help/tagsets.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('tagsets')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /opt/app-\n",
      "[nltk_data]     root/src/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /opt/app-root/src/nltk_data...\n",
      "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('averaged_perceptron_tagger')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the user-friendly terminology for parts of speech\n",
    "posDict = {}\n",
    "with open(\"nltk-tagsets-pos.txt\") as f:\n",
    "    for line in f:\n",
    "        row = line.split(\" : \")\n",
    "        key = row[0]\n",
    "        val = row[1]\n",
    "        posDict[key] = val.strip()\n",
    "\n",
    "sourceText = \"\"\"Oh say can you see, by the dawn's early light, what so proudly we hailed at the twilight's last gleaming?\"\"\"\n",
    "\n",
    "# tag the parts of speech\n",
    "Sentence = nltk.word_tokenize(sourceText)\n",
    "posTagged = nltk.pos_tag(Sentence)\n",
    "\n",
    "# write the tagged pos'es to the output file\n",
    "file = open(\"grammified.txt\", \"w\")\n",
    "x = 0\n",
    "while x < len(posTagged): \n",
    "    word, pos = posTagged[x]\n",
    "    if pos in posDict:\n",
    "        pos = posDict[pos]\n",
    "    else:\n",
    "        pos = \"stet\"\n",
    "    file.write(word + \" : \" + pos + \"\\n\")\n",
    "    x = x+1\n",
    "file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
